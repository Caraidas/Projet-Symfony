

security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        

        api:
            pattern: ^/api
            stateless: true
            jwt: ~ # active le firewall JWT
            provider: app_user_provider

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
            logout:
                path: app_logout
                target: app_login

    role_hierarchy:
        ROLE_ADMIN: [ROLE_AUTHOR]
        ROLE_AUTHOR: [ROLE_USER]

    access_control:
        # Accès public
        # get episodes
        # get recommendations
        # get recherches
        - { path: ^/api/login, roles: PUBLIC_ACCESS, methods: [POST] }
        - { path: ^/api/register, roles: PUBLIC_ACCESS, methods: [POST] }
        # post insription

        # Accès utilisateur authentifié
        # post commenter
        # post like
        # post unlike
        # get recommendations (pour l'utilisateur)
        # post ajouter/enlever favoris
        # get favoris

        # Accès auteur authentifié
        # post ajouter/modifier/supprimer un épisode
        - { path: ^/api/webtoon/create, roles: ROLE_AUTHOR, methods: [POST] }
        # post ajouter/modifier/supprimer un webtoon

        # Accès admin
        - { path: ^/admin, roles: ROLE_ADMIN }
        # post modifier/supprimer un utilisateur

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
